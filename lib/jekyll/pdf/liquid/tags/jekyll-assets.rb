begin
  require 'jekyll-assets'

  module Jekyll
    module PDF
      class AssetsTag < Jekyll::Assets::Tag

        # --------------------------------------------------------------------
        # Tags that we allow our users to use.
        # --------------------------------------------------------------------

        AcceptableTags = %W(
          pdf_img
          pdf_image
          pdf_javascript
          pdf_stylesheet
          pdf_asset_path
          pdf_style
          pdf_css
          pdf_js
        ).freeze

        def initialize(tag, args, tokens)
          tag = tag.to_s.sub!("pdf_", "")
          super(tag, args, tokens)
        end

        def render(context)
          @path_prefix = "file://" + context.registers[:site].dest

          args, asset = render_raw(context)

          data = if args.key?(:data) && args[:data].respond_to?(:key?) && args[:data].key?(:uri)
            asset.data_uri
          else
            File.join(@path_prefix, asset.digest_path.to_s)
          end

          template = case @tag
          when :img, :image
            '<img src="%s" %s />'
          when :javascript, :js
            '<script src="%s" %s></script>'
          when :stylesheet, :css, :style
            '<link rel="stylesheet" href="%s" %s />'
          when :asset_path
            '%s'
          else
            # Fallback: return the default HTML generated by jekyll-assets v4
            return HTML.build(args: args, asset: asset, ctx: context)
          end

          format(template, data, args.to_html)
        end

      end
    end
  end

  Jekyll::PDF::AssetsTag::AcceptableTags.each do |tag|
    Liquid::Template.register_tag tag, Jekyll::PDF::AssetsTag
  end
rescue LoadError => e
  raise unless e.message =~ /jekyll-assets/
end
